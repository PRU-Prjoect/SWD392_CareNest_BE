// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250610021429_second")]
    partial class second
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DAL.Models.Account", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("img_url")
                        .HasColumnType("text");

                    b.Property<string>("img_url_id")
                        .HasColumnType("text");

                    b.Property<bool>("is_active")
                        .HasColumnType("boolean");

                    b.Property<string>("otp")
                        .HasColumnType("text");

                    b.Property<DateTime?>("otpExpired")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("role")
                        .HasColumnType("integer");

                    b.Property<DateTime>("updated_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("email")
                        .IsUnique();

                    b.HasIndex("username")
                        .IsUnique();

                    b.ToTable("Account");
                });

            modelBuilder.Entity("DAL.Models.Appointments", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("customer_id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("end_type")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("location_type")
                        .HasColumnType("text");

                    b.Property<string>("notes")
                        .HasColumnType("text");

                    b.Property<DateTime>("start_time")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("status")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("updated_at")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("id");

                    b.HasIndex("customer_id");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("DAL.Models.Customer", b =>
                {
                    b.Property<Guid>("account_id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("birthday")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("full_name")
                        .HasColumnType("text");

                    b.Property<string>("gender")
                        .HasColumnType("text");

                    b.Property<DateTime>("updated_at")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("account_id");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("DAL.Models.Hotel", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("available_room")
                        .HasColumnType("integer");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<bool>("is_active")
                        .HasColumnType("boolean");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<Guid>("shop_id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("sub_address_id")
                        .HasColumnType("uuid");

                    b.Property<int?>("total_room")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("shop_id");

                    b.HasIndex("sub_address_id");

                    b.ToTable("Hotel");
                });

            modelBuilder.Entity("DAL.Models.ImageGallery", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("img_url")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<string>("owner_id")
                        .HasColumnType("text");

                    b.Property<DateTime>("updated_at")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("id");

                    b.ToTable("ImageGallery");
                });

            modelBuilder.Entity("DAL.Models.Notification", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<bool>("is_read")
                        .HasColumnType("boolean");

                    b.Property<Guid>("receiver_id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("updated_at")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("id");

                    b.HasIndex("receiver_id");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("DAL.Models.Pet_Service_Room", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("is_service")
                        .HasColumnType("boolean");

                    b.Property<Guid>("owner_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("pet_type_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("room_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("service_id")
                        .HasColumnType("uuid");

                    b.HasKey("id");

                    b.HasIndex("pet_type_id");

                    b.HasIndex("room_id");

                    b.HasIndex("service_id");

                    b.ToTable("Pet_Service_Room");
                });

            modelBuilder.Entity("DAL.Models.Pet_Type", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<DateTime>("updated_at")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("id");

                    b.ToTable("Pet_Type");
                });

            modelBuilder.Entity("DAL.Models.Rating", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("comment")
                        .HasColumnType("text");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("customer_id")
                        .HasColumnType("uuid");

                    b.Property<float?>("star")
                        .HasColumnType("real");

                    b.Property<DateTime>("updated_at")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("id");

                    b.HasIndex("customer_id");

                    b.ToTable("Rating");
                });

            modelBuilder.Entity("DAL.Models.Room", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("Hotelid")
                        .HasColumnType("uuid");

                    b.Property<string>("amendities")
                        .HasColumnType("text");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double?>("daily_price")
                        .HasColumnType("double precision");

                    b.Property<bool>("is_available")
                        .HasColumnType("boolean");

                    b.Property<int?>("max_capacity")
                        .HasColumnType("integer");

                    b.Property<int?>("room_number")
                        .HasColumnType("integer");

                    b.Property<int?>("room_type")
                        .HasColumnType("integer");

                    b.Property<int?>("star")
                        .HasColumnType("integer");

                    b.Property<DateTime>("updated_at")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("id");

                    b.HasIndex("Hotelid");

                    b.ToTable("Room");
                });

            modelBuilder.Entity("DAL.Models.Room_Booking", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("check_in_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("check_out_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("customer_id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("feeding_schedule")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("medication_schedule")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("room_detail_id")
                        .HasColumnType("uuid");

                    b.Property<bool>("status")
                        .HasColumnType("boolean");

                    b.Property<int>("total_amount")
                        .HasColumnType("integer");

                    b.Property<int>("total_night")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("customer_id");

                    b.HasIndex("room_detail_id");

                    b.ToTable("Room_Booking");
                });

            modelBuilder.Entity("DAL.Models.Service", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<float>("Star")
                        .HasColumnType("real");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("discount_percent")
                        .HasColumnType("real");

                    b.Property<int>("duration_type")
                        .HasColumnType("integer");

                    b.Property<bool>("is_active")
                        .HasColumnType("boolean");

                    b.Property<int>("limit_per_hour")
                        .HasColumnType("integer");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("purchases")
                        .HasColumnType("integer");

                    b.Property<Guid>("service_type_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("shop_id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("updated_at")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("id");

                    b.HasIndex("service_type_id");

                    b.HasIndex("shop_id");

                    b.ToTable("Service");
                });

            modelBuilder.Entity("DAL.Models.Service_Appointment", b =>
                {
                    b.Property<Guid>("service_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("appointment_id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("end_type")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("rating_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("room_id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("start_time")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("updated_at")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("service_id");

                    b.HasIndex("appointment_id");

                    b.HasIndex("rating_id")
                        .IsUnique();

                    b.HasIndex("room_id");

                    b.ToTable("Service_Appointment");
                });

            modelBuilder.Entity("DAL.Models.Service_Type", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<string>("img_url")
                        .HasColumnType("text");

                    b.Property<bool>("is_public")
                        .HasColumnType("boolean");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<DateTime>("updated_at")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("id");

                    b.ToTable("Service_Type");
                });

            modelBuilder.Entity("DAL.Models.Shop", b =>
                {
                    b.Property<Guid>("account_id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<bool>("status")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("updated_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("working_day")
                        .HasColumnType("text");

                    b.HasKey("account_id");

                    b.ToTable("Shop");
                });

            modelBuilder.Entity("DAL.Models.Staff", b =>
                {
                    b.Property<Guid>("account_id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("birthday")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("full_name")
                        .HasColumnType("text");

                    b.Property<string>("gender")
                        .HasColumnType("text");

                    b.Property<string>("hired_at")
                        .HasColumnType("text");

                    b.Property<string>("position")
                        .HasColumnType("text");

                    b.Property<string>("shop_address_id")
                        .HasColumnType("text");

                    b.Property<Guid>("shop_id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("updated_at")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("account_id");

                    b.HasIndex("shop_id");

                    b.ToTable("Staff");
                });

            modelBuilder.Entity("DAL.Models.Sub_Address", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("address_name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("is_default")
                        .HasColumnType("boolean");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("phone")
                        .HasColumnType("integer");

                    b.Property<Guid>("shop_id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("updated_at")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("id");

                    b.HasIndex("shop_id");

                    b.ToTable("Sub_Address");
                });

            modelBuilder.Entity("DAL.Models.Appointments", b =>
                {
                    b.HasOne("DAL.Models.Customer", "customer")
                        .WithMany("appointment")
                        .HasForeignKey("customer_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("customer");
                });

            modelBuilder.Entity("DAL.Models.Customer", b =>
                {
                    b.HasOne("DAL.Models.Account", "account")
                        .WithOne("customer")
                        .HasForeignKey("DAL.Models.Customer", "account_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("account");
                });

            modelBuilder.Entity("DAL.Models.Hotel", b =>
                {
                    b.HasOne("DAL.Models.Shop", "shop")
                        .WithMany("hotel")
                        .HasForeignKey("shop_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Sub_Address", "sub_address")
                        .WithMany()
                        .HasForeignKey("sub_address_id");

                    b.Navigation("shop");

                    b.Navigation("sub_address");
                });

            modelBuilder.Entity("DAL.Models.Notification", b =>
                {
                    b.HasOne("DAL.Models.Account", "account")
                        .WithMany("notification")
                        .HasForeignKey("receiver_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("account");
                });

            modelBuilder.Entity("DAL.Models.Pet_Service_Room", b =>
                {
                    b.HasOne("DAL.Models.Pet_Type", "pet_type")
                        .WithMany()
                        .HasForeignKey("pet_type_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Room", "room")
                        .WithMany("service")
                        .HasForeignKey("room_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Service", "service")
                        .WithMany("room")
                        .HasForeignKey("service_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("pet_type");

                    b.Navigation("room");

                    b.Navigation("service");
                });

            modelBuilder.Entity("DAL.Models.Rating", b =>
                {
                    b.HasOne("DAL.Models.Customer", "customer")
                        .WithMany("rating")
                        .HasForeignKey("customer_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("customer");
                });

            modelBuilder.Entity("DAL.Models.Room", b =>
                {
                    b.HasOne("DAL.Models.Hotel", null)
                        .WithMany("room")
                        .HasForeignKey("Hotelid");
                });

            modelBuilder.Entity("DAL.Models.Room_Booking", b =>
                {
                    b.HasOne("DAL.Models.Customer", "customer")
                        .WithMany("room_booking")
                        .HasForeignKey("customer_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Room", "room")
                        .WithMany("room_booking")
                        .HasForeignKey("room_detail_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("customer");

                    b.Navigation("room");
                });

            modelBuilder.Entity("DAL.Models.Service", b =>
                {
                    b.HasOne("DAL.Models.Service_Type", "service_type")
                        .WithMany("service")
                        .HasForeignKey("service_type_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Shop", "shop")
                        .WithMany("service")
                        .HasForeignKey("shop_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("service_type");

                    b.Navigation("shop");
                });

            modelBuilder.Entity("DAL.Models.Service_Appointment", b =>
                {
                    b.HasOne("DAL.Models.Appointments", "appointment")
                        .WithMany("service_appointment")
                        .HasForeignKey("appointment_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Rating", "rating")
                        .WithOne("service_appointment")
                        .HasForeignKey("DAL.Models.Service_Appointment", "rating_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Room", "room")
                        .WithMany()
                        .HasForeignKey("room_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Service", "service")
                        .WithMany("service_appointment")
                        .HasForeignKey("service_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("appointment");

                    b.Navigation("rating");

                    b.Navigation("room");

                    b.Navigation("service");
                });

            modelBuilder.Entity("DAL.Models.Shop", b =>
                {
                    b.HasOne("DAL.Models.Account", "account")
                        .WithOne("shop")
                        .HasForeignKey("DAL.Models.Shop", "account_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("account");
                });

            modelBuilder.Entity("DAL.Models.Staff", b =>
                {
                    b.HasOne("DAL.Models.Account", "account")
                        .WithOne("staff")
                        .HasForeignKey("DAL.Models.Staff", "account_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Shop", "shop")
                        .WithMany("staff")
                        .HasForeignKey("shop_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("account");

                    b.Navigation("shop");
                });

            modelBuilder.Entity("DAL.Models.Sub_Address", b =>
                {
                    b.HasOne("DAL.Models.Shop", "shop")
                        .WithMany("sub_address")
                        .HasForeignKey("shop_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("shop");
                });

            modelBuilder.Entity("DAL.Models.Account", b =>
                {
                    b.Navigation("customer");

                    b.Navigation("notification");

                    b.Navigation("shop");

                    b.Navigation("staff");
                });

            modelBuilder.Entity("DAL.Models.Appointments", b =>
                {
                    b.Navigation("service_appointment");
                });

            modelBuilder.Entity("DAL.Models.Customer", b =>
                {
                    b.Navigation("appointment");

                    b.Navigation("rating");

                    b.Navigation("room_booking");
                });

            modelBuilder.Entity("DAL.Models.Hotel", b =>
                {
                    b.Navigation("room");
                });

            modelBuilder.Entity("DAL.Models.Rating", b =>
                {
                    b.Navigation("service_appointment")
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.Models.Room", b =>
                {
                    b.Navigation("room_booking");

                    b.Navigation("service");
                });

            modelBuilder.Entity("DAL.Models.Service", b =>
                {
                    b.Navigation("room");

                    b.Navigation("service_appointment");
                });

            modelBuilder.Entity("DAL.Models.Service_Type", b =>
                {
                    b.Navigation("service");
                });

            modelBuilder.Entity("DAL.Models.Shop", b =>
                {
                    b.Navigation("hotel");

                    b.Navigation("service");

                    b.Navigation("staff");

                    b.Navigation("sub_address");
                });
#pragma warning restore 612, 618
        }
    }
}
